{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","todoUser","usersFromServer","find","classNames","TodoList","todos","map","App","useState","todosFromServer","setTodos","setTitle","setUserId","titleNotFilled","setTitleNotFilled","userNotFilled","setUserNotFilled","action","method","onSubmit","event","preventDefault","trimmedTitle","trim","newTodo","Math","max","oldTodos","htmlFor","type","placeholder","onChange","target","value","disabled","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe1505d8.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  const todoUser = usersFromServer.find(user => user.id === userId) || null;\n\n  return (\n    <article\n      data-id={id}\n      key={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {todoUser && (<UserInfo user={todoUser} />)}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosFromServer);\n\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n\n  const [titleNotFilled, setTitleNotFilled] = useState(false);\n  const [userNotFilled, setUserNotFilled] = useState(false);\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleNotFilled(!event.target.value.trim());\n    setTitle(event.target.value);\n  };\n\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setUserNotFilled(false);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleOnSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const trimmedTitle = title.trim();\n\n    setTitleNotFilled(!trimmedTitle);\n    setUserNotFilled(!userId);\n\n    if (!trimmedTitle || !userId) {\n      return;\n    }\n\n    const newId = Math.max(...todos.map(todo => todo.id)) + 1;\n\n    const newTodo = {\n      id: newId,\n      title: trimmedTitle,\n      completed: false,\n      userId,\n    };\n\n    setTodos(oldTodos => [...oldTodos, newTodo]);\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App section box\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleOnSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            className=\"input\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            onChange={handleTitle}\n            value={title}\n          />\n          {titleNotFilled && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            onChange={handleUserSelect}\n            value={userId}\n            className=\"select is-info\"\n          >\n            <option value=\"0\" disabled selected>\n              Choose a user\n            </option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {userNotFilled && <span className=\"error\">Please choose a user</span>}\n        </div>\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"button is-primary\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport 'bulma';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}